// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson11e84f9cDecodeGithubComVungleVungoOpenrtb(in *jlexer.Lexer, out *EID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "inserter":
			out.Inserter = string(in.String())
		case "matcher":
			out.Matcher = string(in.String())
		case "mm":
			out.MM = MatchMethod(in.Int64())
		case "source":
			out.Source = string(in.String())
		case "uids":
			if in.IsNull() {
				in.Skip()
				out.UIDs = nil
			} else {
				in.Delim('[')
				if out.UIDs == nil {
					if !in.IsDelim(']') {
						out.UIDs = make([]UID, 0, 1)
					} else {
						out.UIDs = []UID{}
					}
				} else {
					out.UIDs = (out.UIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UID
					easyjson11e84f9cDecodeGithubComVungleVungoOpenrtb1(in, &v1)
					out.UIDs = append(out.UIDs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11e84f9cEncodeGithubComVungleVungoOpenrtb(out *jwriter.Writer, in EID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Inserter != "" {
		const prefix string = ",\"inserter\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Inserter))
	}
	if in.Matcher != "" {
		const prefix string = ",\"matcher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Matcher))
	}
	if in.MM != 0 {
		const prefix string = ",\"mm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MM))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if len(in.UIDs) != 0 {
		const prefix string = ",\"uids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.UIDs {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson11e84f9cEncodeGithubComVungleVungoOpenrtb1(out, v3)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11e84f9cEncodeGithubComVungleVungoOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11e84f9cEncodeGithubComVungleVungoOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11e84f9cDecodeGithubComVungleVungoOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11e84f9cDecodeGithubComVungleVungoOpenrtb(l, v)
}
func easyjson11e84f9cDecodeGithubComVungleVungoOpenrtb1(in *jlexer.Lexer, out *UID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "atype":
			out.AType = AgentType(in.Int64())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11e84f9cEncodeGithubComVungleVungoOpenrtb1(out *jwriter.Writer, in UID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.AType != 0 {
		const prefix string = ",\"atype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.AType))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
