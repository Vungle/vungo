// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7ebaa60bDecodeGithubComVungleVungoOpenrtb(in *jlexer.Lexer, out *Impression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "metric":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if out.Metrics == nil {
					if !in.IsDelim(']') {
						out.Metrics = make([]*Metric, 0, 8)
					} else {
						out.Metrics = []*Metric{}
					}
				} else {
					out.Metrics = (out.Metrics)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Metric
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Metric)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Metrics = append(out.Metrics, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(Banner)
				}
				(*out.Banner).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(Audio)
				}
				(*out.Audio).UnmarshalEasyJSON(in)
			}
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(Native)
				}
				(*out.Native).UnmarshalEasyJSON(in)
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.PrivateMarketplace = nil
			} else {
				if out.PrivateMarketplace == nil {
					out.PrivateMarketplace = new(PrivateMarketplace)
				}
				(*out.PrivateMarketplace).UnmarshalEasyJSON(in)
			}
		case "displaymanager":
			out.DisplayManager = string(in.String())
		case "displaymanagerver":
			out.DisplayManagerVersion = string(in.String())
		case "instl":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IsInterstitial).UnmarshalJSON(data))
			}
		case "tagid":
			out.TagID = string(in.String())
		case "bidfloor":
			out.BidFloorPrice = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCurrency = Currency(in.String())
		case "clickbrowser":
			if in.IsNull() {
				in.Skip()
				out.BrowserTypeUponClick = nil
			} else {
				if out.BrowserTypeUponClick == nil {
					out.BrowserTypeUponClick = new(BrowserType)
				}
				*out.BrowserTypeUponClick = BrowserType(in.Int())
			}
		case "secure":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IsSecure).UnmarshalJSON(data))
			}
		case "iframebuster":
			if in.IsNull() {
				in.Skip()
				out.IframeBuster = nil
			} else {
				in.Delim('[')
				if out.IframeBuster == nil {
					if !in.IsDelim(']') {
						out.IframeBuster = make([]string, 0, 4)
					} else {
						out.IframeBuster = []string{}
					}
				} else {
					out.IframeBuster = (out.IframeBuster)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.IframeBuster = append(out.IframeBuster, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exp":
			out.Exp = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Extension).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7ebaa60bEncodeGithubComVungleVungoOpenrtb(out *jwriter.Writer, in Impression) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.Metrics) != 0 {
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v3, v4 := range in.Metrics {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					(*v4).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Banner != nil {
		const prefix string = ",\"banner\":"
		out.RawString(prefix)
		(*in.Banner).MarshalEasyJSON(out)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		(*in.Video).MarshalEasyJSON(out)
	}
	if in.Audio != nil {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		(*in.Audio).MarshalEasyJSON(out)
	}
	if in.Native != nil {
		const prefix string = ",\"native\":"
		out.RawString(prefix)
		(*in.Native).MarshalEasyJSON(out)
	}
	if in.PrivateMarketplace != nil {
		const prefix string = ",\"pmp\":"
		out.RawString(prefix)
		(*in.PrivateMarketplace).MarshalEasyJSON(out)
	}
	if in.DisplayManager != "" {
		const prefix string = ",\"displaymanager\":"
		out.RawString(prefix)
		out.String(string(in.DisplayManager))
	}
	if in.DisplayManagerVersion != "" {
		const prefix string = ",\"displaymanagerver\":"
		out.RawString(prefix)
		out.String(string(in.DisplayManagerVersion))
	}
	if in.IsInterstitial {
		const prefix string = ",\"instl\":"
		out.RawString(prefix)
		out.Raw((in.IsInterstitial).MarshalJSON())
	}
	if in.TagID != "" {
		const prefix string = ",\"tagid\":"
		out.RawString(prefix)
		out.String(string(in.TagID))
	}
	{
		const prefix string = ",\"bidfloor\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidFloorPrice))
	}
	if in.BidFloorCurrency != "" {
		const prefix string = ",\"bidfloorcur\":"
		out.RawString(prefix)
		out.String(string(in.BidFloorCurrency))
	}
	if in.BrowserTypeUponClick != nil {
		const prefix string = ",\"clickbrowser\":"
		out.RawString(prefix)
		out.Int(int(*in.BrowserTypeUponClick))
	}
	if in.IsSecure {
		const prefix string = ",\"secure\":"
		out.RawString(prefix)
		out.Raw((in.IsSecure).MarshalJSON())
	}
	if len(in.IframeBuster) != 0 {
		const prefix string = ",\"iframebuster\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.IframeBuster {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Exp != 0 {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int(int(in.Exp))
	}
	if len(in.Extension) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Extension).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Impression) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7ebaa60bEncodeGithubComVungleVungoOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Impression) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7ebaa60bEncodeGithubComVungleVungoOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Impression) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7ebaa60bDecodeGithubComVungleVungoOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Impression) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7ebaa60bDecodeGithubComVungleVungoOpenrtb(l, v)
}
