// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA0535929DecodeGithubComVungleVungoOpenrtb(in *jlexer.Lexer, out *Geo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Latitude = float64(in.Float64())
		case "lon":
			out.Longitude = float64(in.Float64())
		case "type":
			out.Type = LocationType(in.Int())
		case "accuracy":
			out.Accuracy = int(in.Int())
		case "lastfix":
			out.LastFix = int(in.Int())
		case "ipservice":
			out.IPService = IPLocationService(in.Int())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "regionfips104":
			out.RegionFIPS104 = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "city":
			out.City = string(in.String())
		case "zip":
			out.ZipCode = string(in.String())
		case "utcoffset":
			out.UTCOffset = int(in.Int())
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA0535929EncodeGithubComVungleVungoOpenrtb(out *jwriter.Writer, in Geo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		const prefix string = ",\"lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Longitude))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Accuracy != 0 {
		const prefix string = ",\"accuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Accuracy))
	}
	if in.LastFix != 0 {
		const prefix string = ",\"lastfix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastFix))
	}
	if in.IPService != 0 {
		const prefix string = ",\"ipservice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IPService))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.RegionFIPS104 != "" {
		const prefix string = ",\"regionfips104\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegionFIPS104))
	}
	if in.Metro != "" {
		const prefix string = ",\"metro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Metro))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.ZipCode != "" {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ZipCode))
	}
	if in.UTCOffset != 0 {
		const prefix string = ",\"utcoffset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UTCOffset))
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Geo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA0535929EncodeGithubComVungleVungoOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Geo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA0535929EncodeGithubComVungleVungoOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Geo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA0535929DecodeGithubComVungleVungoOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Geo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA0535929DecodeGithubComVungleVungoOpenrtb(l, v)
}
