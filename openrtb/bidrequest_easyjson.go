// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb(in *jlexer.Lexer, out *BidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "imp":
			if in.IsNull() {
				in.Skip()
				out.Impressions = nil
			} else {
				in.Delim('[')
				if out.Impressions == nil {
					if !in.IsDelim(']') {
						out.Impressions = make([]*Impression, 0, 8)
					} else {
						out.Impressions = []*Impression{}
					}
				} else {
					out.Impressions = (out.Impressions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Impression
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Impression)
						}
						easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb1(in, v1)
					}
					out.Impressions = append(out.Impressions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "site":
			if in.IsNull() {
				in.Skip()
				out.Site = nil
			} else {
				if out.Site == nil {
					out.Site = new(Site)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb2(in, out.Site)
			}
		case "app":
			if in.IsNull() {
				in.Skip()
				out.Application = nil
			} else {
				if out.Application == nil {
					out.Application = new(Application)
				}
				(*out.Application).UnmarshalEasyJSON(in)
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb3(in, out.Device)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb4(in, out.User)
			}
		case "test":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IsTestMode).UnmarshalJSON(data))
			}
		case "at":
			out.AuctionType = BidAuctionType(in.Int())
		case "tmax":
			out.Timeout = int(in.Int())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.WhitelistedSeats = nil
			} else {
				in.Delim('[')
				if out.WhitelistedSeats == nil {
					if !in.IsDelim(']') {
						out.WhitelistedSeats = make([]string, 0, 4)
					} else {
						out.WhitelistedSeats = []string{}
					}
				} else {
					out.WhitelistedSeats = (out.WhitelistedSeats)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.WhitelistedSeats = append(out.WhitelistedSeats, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bseat":
			if in.IsNull() {
				in.Skip()
				out.BlocklistedSeats = nil
			} else {
				in.Delim('[')
				if out.BlocklistedSeats == nil {
					if !in.IsDelim(']') {
						out.BlocklistedSeats = make([]string, 0, 4)
					} else {
						out.BlocklistedSeats = []string{}
					}
				} else {
					out.BlocklistedSeats = (out.BlocklistedSeats)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.BlocklistedSeats = append(out.BlocklistedSeats, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allimps":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.HasAllImpressions).UnmarshalJSON(data))
			}
		case "cur":
			if in.IsNull() {
				in.Skip()
				out.Currencies = nil
			} else {
				in.Delim('[')
				if out.Currencies == nil {
					if !in.IsDelim(']') {
						out.Currencies = make([]Currency, 0, 4)
					} else {
						out.Currencies = []Currency{}
					}
				} else {
					out.Currencies = (out.Currencies)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Currency
					v4 = Currency(in.String())
					out.Currencies = append(out.Currencies, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wlang":
			if in.IsNull() {
				in.Skip()
				out.WhitelistLanguages = nil
			} else {
				in.Delim('[')
				if out.WhitelistLanguages == nil {
					if !in.IsDelim(']') {
						out.WhitelistLanguages = make([]string, 0, 4)
					} else {
						out.WhitelistLanguages = []string{}
					}
				} else {
					out.WhitelistLanguages = (out.WhitelistLanguages)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.WhitelistLanguages = append(out.WhitelistLanguages, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bcat":
			if in.IsNull() {
				in.Skip()
				out.BlockedCategories = nil
			} else {
				in.Delim('[')
				if out.BlockedCategories == nil {
					if !in.IsDelim(']') {
						out.BlockedCategories = make([]Category, 0, 4)
					} else {
						out.BlockedCategories = []Category{}
					}
				} else {
					out.BlockedCategories = (out.BlockedCategories)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Category
					v6 = Category(in.String())
					out.BlockedCategories = append(out.BlockedCategories, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "badv":
			if in.IsNull() {
				in.Skip()
				out.BlockedAdvertisers = nil
			} else {
				in.Delim('[')
				if out.BlockedAdvertisers == nil {
					if !in.IsDelim(']') {
						out.BlockedAdvertisers = make([]string, 0, 4)
					} else {
						out.BlockedAdvertisers = []string{}
					}
				} else {
					out.BlockedAdvertisers = (out.BlockedAdvertisers)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.BlockedAdvertisers = append(out.BlockedAdvertisers, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bapp":
			if in.IsNull() {
				in.Skip()
				out.BlockedAdvertisersByMarketID = nil
			} else {
				in.Delim('[')
				if out.BlockedAdvertisersByMarketID == nil {
					if !in.IsDelim(']') {
						out.BlockedAdvertisersByMarketID = make([]string, 0, 4)
					} else {
						out.BlockedAdvertisersByMarketID = []string{}
					}
				} else {
					out.BlockedAdvertisersByMarketID = (out.BlockedAdvertisersByMarketID)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.BlockedAdvertisersByMarketID = append(out.BlockedAdvertisersByMarketID, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(Source)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb5(in, out.Source)
			}
		case "regs":
			if in.IsNull() {
				in.Skip()
				out.Regulation = nil
			} else {
				if out.Regulation == nil {
					out.Regulation = new(Regulation)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb6(in, out.Regulation)
			}
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb(out *jwriter.Writer, in BidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"imp\":"
		out.RawString(prefix)
		if in.Impressions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Impressions {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb1(out, *v10)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Site != nil {
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb2(out, *in.Site)
	}
	if in.Application != nil {
		const prefix string = ",\"app\":"
		out.RawString(prefix)
		(*in.Application).MarshalEasyJSON(out)
	}
	if in.Device != nil {
		const prefix string = ",\"device\":"
		out.RawString(prefix)
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb3(out, *in.Device)
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb4(out, *in.User)
	}
	if in.IsTestMode {
		const prefix string = ",\"test\":"
		out.RawString(prefix)
		out.Raw((in.IsTestMode).MarshalJSON())
	}
	{
		const prefix string = ",\"at\":"
		out.RawString(prefix)
		out.Int(int(in.AuctionType))
	}
	if in.Timeout != 0 {
		const prefix string = ",\"tmax\":"
		out.RawString(prefix)
		out.Int(int(in.Timeout))
	}
	if len(in.WhitelistedSeats) != 0 {
		const prefix string = ",\"wseat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.WhitelistedSeats {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.BlocklistedSeats) != 0 {
		const prefix string = ",\"bseat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.BlocklistedSeats {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.HasAllImpressions {
		const prefix string = ",\"allimps\":"
		out.RawString(prefix)
		out.Raw((in.HasAllImpressions).MarshalJSON())
	}
	if len(in.Currencies) != 0 {
		const prefix string = ",\"cur\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.Currencies {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.WhitelistLanguages) != 0 {
		const prefix string = ",\"wlang\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.WhitelistLanguages {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.BlockedCategories) != 0 {
		const prefix string = ",\"bcat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v19, v20 := range in.BlockedCategories {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.BlockedAdvertisers) != 0 {
		const prefix string = ",\"badv\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v21, v22 := range in.BlockedAdvertisers {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if len(in.BlockedAdvertisersByMarketID) != 0 {
		const prefix string = ",\"bapp\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.BlockedAdvertisersByMarketID {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Source != nil {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb5(out, *in.Source)
	}
	if in.Regulation != nil {
		const prefix string = ",\"regs\":"
		out.RawString(prefix)
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb6(out, *in.Regulation)
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb(l, v)
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb6(in *jlexer.Lexer, out *Regulation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coppa":
			if in.IsNull() {
				in.Skip()
				out.IsCoppaCompliant = nil
			} else {
				if out.IsCoppaCompliant == nil {
					out.IsCoppaCompliant = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IsCoppaCompliant).UnmarshalJSON(data))
				}
			}
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb6(out *jwriter.Writer, in Regulation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IsCoppaCompliant != nil {
		const prefix string = ",\"coppa\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.IsCoppaCompliant).MarshalJSON())
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb5(in *jlexer.Lexer, out *Source) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fd":
			out.FD = int8(in.Int8())
		case "tid":
			out.TID = string(in.String())
		case "pchain":
			out.PChain = string(in.String())
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb5(out *jwriter.Writer, in Source) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FD != 0 {
		const prefix string = ",\"fd\":"
		first = false
		out.RawString(prefix[1:])
		out.Int8(int8(in.FD))
	}
	if in.TID != "" {
		const prefix string = ",\"tid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TID))
	}
	if in.PChain != "" {
		const prefix string = ",\"pchain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PChain))
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb4(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "buyeruid":
			out.BuyerID = string(in.String())
		case "yob":
			out.BirthYear = int(in.Int())
		case "gender":
			out.Gender = Gender(in.String())
		case "keywords":
			out.Keywords = string(in.String())
		case "customdata":
			out.CustomData = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb7(in, out.Geo)
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Data, 0, 1)
					} else {
						out.Data = []Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Data
					easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb8(in, &v25)
					out.Data = append(out.Data, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb4(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.BuyerID != "" {
		const prefix string = ",\"buyeruid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BuyerID))
	}
	if in.BirthYear != 0 {
		const prefix string = ",\"yob\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BirthYear))
	}
	if in.Gender != "" {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gender))
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.CustomData != "" {
		const prefix string = ",\"customdata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomData))
	}
	if in.Geo != nil {
		const prefix string = ",\"geo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb7(out, *in.Geo)
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v26, v27 := range in.Data {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb8(out, v27)
			}
			out.RawByte(']')
		}
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb8(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "segment":
			if in.IsNull() {
				in.Skip()
				out.Segment = nil
			} else {
				in.Delim('[')
				if out.Segment == nil {
					if !in.IsDelim(']') {
						out.Segment = make([]*Segment, 0, 8)
					} else {
						out.Segment = []*Segment{}
					}
				} else {
					out.Segment = (out.Segment)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *Segment
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(Segment)
						}
						easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb9(in, v28)
					}
					out.Segment = append(out.Segment, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb8(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Segment) != 0 {
		const prefix string = ",\"segment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v29, v30 := range in.Segment {
				if v29 > 0 {
					out.RawByte(',')
				}
				if v30 == nil {
					out.RawString("null")
				} else {
					easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb9(out, *v30)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb9(in *jlexer.Lexer, out *Segment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb9(out *jwriter.Writer, in Segment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb7(in *jlexer.Lexer, out *Geo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lat":
			out.Latitude = float64(in.Float64())
		case "lon":
			out.Longitude = float64(in.Float64())
		case "type":
			out.Type = LocationType(in.Int())
		case "accuracy":
			out.Accuracy = int(in.Int())
		case "lastfix":
			out.LastFix = int(in.Int())
		case "ipservice":
			out.IPService = IPLocationService(in.Int())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "regionfips104":
			out.RegionFIPS104 = string(in.String())
		case "metro":
			out.Metro = string(in.String())
		case "city":
			out.City = string(in.String())
		case "zip":
			out.ZipCode = string(in.String())
		case "utcoffset":
			out.UTCOffset = int(in.Int())
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb7(out *jwriter.Writer, in Geo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		const prefix string = ",\"lat\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Longitude))
	}
	if in.Type != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Accuracy != 0 {
		const prefix string = ",\"accuracy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Accuracy))
	}
	if in.LastFix != 0 {
		const prefix string = ",\"lastfix\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LastFix))
	}
	if in.IPService != 0 {
		const prefix string = ",\"ipservice\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IPService))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.RegionFIPS104 != "" {
		const prefix string = ",\"regionfips104\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegionFIPS104))
	}
	if in.Metro != "" {
		const prefix string = ",\"metro\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Metro))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.ZipCode != "" {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ZipCode))
	}
	if in.UTCOffset != 0 {
		const prefix string = ",\"utcoffset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UTCOffset))
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb3(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ua":
			out.BrowserUserAgent = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb7(in, out.Geo)
			}
		case "dnt":
			if in.IsNull() {
				in.Skip()
				out.HasDoNotTrack = nil
			} else {
				if out.HasDoNotTrack == nil {
					out.HasDoNotTrack = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.HasDoNotTrack).UnmarshalJSON(data))
				}
			}
		case "lmt":
			if in.IsNull() {
				in.Skip()
				out.HasLimitedAdTracking = nil
			} else {
				if out.HasLimitedAdTracking == nil {
					out.HasLimitedAdTracking = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.HasLimitedAdTracking).UnmarshalJSON(data))
				}
			}
		case "ip":
			out.IP = string(in.String())
		case "ipv6":
			out.IPv6 = string(in.String())
		case "devicetype":
			out.Type = DeviceType(in.Int())
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "os":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OS).UnmarshalJSON(data))
			}
		case "osv":
			out.OSVersion = OSVersion(in.String())
		case "hwv":
			out.HardwareVersion = string(in.String())
		case "h":
			out.Height = int(in.Int())
		case "w":
			out.Width = int(in.Int())
		case "ppi":
			out.PPI = int(in.Int())
		case "pxratio":
			out.PixelRatio = float64(in.Float64())
		case "js":
			if in.IsNull() {
				in.Skip()
				out.SupportsJavaScript = nil
			} else {
				if out.SupportsJavaScript == nil {
					out.SupportsJavaScript = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SupportsJavaScript).UnmarshalJSON(data))
				}
			}
		case "geofetch":
			if in.IsNull() {
				in.Skip()
				out.GeoFetch = nil
			} else {
				if out.GeoFetch == nil {
					out.GeoFetch = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.GeoFetch).UnmarshalJSON(data))
				}
			}
		case "flashver":
			out.FlashVersion = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "carrier":
			out.Carrier = string(in.String())
		case "mccmnc":
			out.MCCMNC = string(in.String())
		case "connectiontype":
			out.ConnectionType = ConnectionType(in.Int())
		case "ifa":
			out.IFA = string(in.String())
		case "didsha1":
			out.HardwareIDSHA1 = string(in.String())
		case "didmd5":
			out.HardwareIDMD5 = string(in.String())
		case "dpidsha1":
			out.PlatformIDSHA1 = string(in.String())
		case "dpidmd5":
			out.PlatformIDMD5 = string(in.String())
		case "macsha1":
			out.MACSHA1 = string(in.String())
		case "macmd5":
			out.MACMD5 = string(in.String())
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb3(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BrowserUserAgent != "" {
		const prefix string = ",\"ua\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.BrowserUserAgent))
	}
	if in.Geo != nil {
		const prefix string = ",\"geo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb7(out, *in.Geo)
	}
	if in.HasDoNotTrack != nil {
		const prefix string = ",\"dnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.HasDoNotTrack).MarshalJSON())
	}
	if in.HasLimitedAdTracking != nil {
		const prefix string = ",\"lmt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.HasLimitedAdTracking).MarshalJSON())
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IP))
	}
	if in.IPv6 != "" {
		const prefix string = ",\"ipv6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IPv6))
	}
	if in.Type != 0 {
		const prefix string = ",\"devicetype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	if in.Make != "" {
		const prefix string = ",\"make\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Make))
	}
	if in.Model != "" {
		const prefix string = ",\"model\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Model))
	}
	if in.OS != "" {
		const prefix string = ",\"os\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OS))
	}
	if in.OSVersion != "" {
		const prefix string = ",\"osv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OSVersion))
	}
	if in.HardwareVersion != "" {
		const prefix string = ",\"hwv\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HardwareVersion))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	if in.PPI != 0 {
		const prefix string = ",\"ppi\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PPI))
	}
	if in.PixelRatio != 0 {
		const prefix string = ",\"pxratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.PixelRatio))
	}
	if in.SupportsJavaScript != nil {
		const prefix string = ",\"js\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.SupportsJavaScript).MarshalJSON())
	}
	if in.GeoFetch != nil {
		const prefix string = ",\"geofetch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.GeoFetch).MarshalJSON())
	}
	if in.FlashVersion != "" {
		const prefix string = ",\"flashver\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FlashVersion))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Carrier != "" {
		const prefix string = ",\"carrier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Carrier))
	}
	if in.MCCMNC != "" {
		const prefix string = ",\"mccmnc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MCCMNC))
	}
	if in.ConnectionType != 0 {
		const prefix string = ",\"connectiontype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ConnectionType))
	}
	if in.IFA != "" {
		const prefix string = ",\"ifa\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IFA))
	}
	if in.HardwareIDSHA1 != "" {
		const prefix string = ",\"didsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HardwareIDSHA1))
	}
	if in.HardwareIDMD5 != "" {
		const prefix string = ",\"didmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HardwareIDMD5))
	}
	if in.PlatformIDSHA1 != "" {
		const prefix string = ",\"dpidsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PlatformIDSHA1))
	}
	if in.PlatformIDMD5 != "" {
		const prefix string = ",\"dpidmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PlatformIDMD5))
	}
	if in.MACSHA1 != "" {
		const prefix string = ",\"macsha1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MACSHA1))
	}
	if in.MACMD5 != "" {
		const prefix string = ",\"macmd5\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MACMD5))
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb2(in *jlexer.Lexer, out *Site) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Cat = append(out.Cat, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if out.SectionCat == nil {
					if !in.IsDelim(']') {
						out.SectionCat = make([]string, 0, 4)
					} else {
						out.SectionCat = []string{}
					}
				} else {
					out.SectionCat = (out.SectionCat)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.SectionCat = append(out.SectionCat, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if out.PageCat == nil {
					if !in.IsDelim(']') {
						out.PageCat = make([]string, 0, 4)
					} else {
						out.PageCat = []string{}
					}
				} else {
					out.PageCat = (out.PageCat)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.PageCat = append(out.PageCat, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "search":
			out.Search = string(in.String())
		case "mobile":
			if in.IsNull() {
				in.Skip()
				out.Mobile = nil
			} else {
				if out.Mobile == nil {
					out.Mobile = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Mobile).UnmarshalJSON(data))
				}
			}
		case "privacypolicy":
			if in.IsNull() {
				in.Skip()
				out.PrivacyPolicy = nil
			} else {
				if out.PrivacyPolicy == nil {
					out.PrivacyPolicy = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PrivacyPolicy).UnmarshalJSON(data))
				}
			}
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb10(in, out.Publisher)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb11(in, out.Content)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb2(out *jwriter.Writer, in Site) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.Cat {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if len(in.SectionCat) != 0 {
		const prefix string = ",\"sectioncat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.SectionCat {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		const prefix string = ",\"pagecat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.PageCat {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	if in.Page != "" {
		const prefix string = ",\"page\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Page))
	}
	if in.Ref != "" {
		const prefix string = ",\"ref\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Ref))
	}
	if in.Search != "" {
		const prefix string = ",\"search\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Search))
	}
	if in.Mobile != nil {
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Mobile).MarshalJSON())
	}
	if in.PrivacyPolicy != nil {
		const prefix string = ",\"privacypolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.PrivacyPolicy).MarshalJSON())
	}
	if in.Publisher != nil {
		const prefix string = ",\"publisher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb10(out, *in.Publisher)
	}
	if in.Content != nil {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb11(out, *in.Content)
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb11(in *jlexer.Lexer, out *Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "episode":
			if in.IsNull() {
				in.Skip()
				out.Episode = nil
			} else {
				if out.Episode == nil {
					out.Episode = new(int)
				}
				*out.Episode = int(in.Int())
			}
		case "title":
			out.Title = string(in.String())
		case "series":
			out.Series = string(in.String())
		case "season":
			out.Season = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "genre":
			out.Genre = string(in.String())
		case "album":
			out.Album = string(in.String())
		case "isrc":
			out.ISRC = string(in.String())
		case "producer":
			if in.IsNull() {
				in.Skip()
				out.Producer = nil
			} else {
				if out.Producer == nil {
					out.Producer = new(Producer)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb12(in, out.Producer)
			}
		case "url":
			out.URL = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Cat = append(out.Cat, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prodq":
			out.ProdQ = ProductionQuality(in.Int())
		case "videoquality":
			out.VideoQuality = ProductionQuality(in.Int())
		case "context":
			out.Context = ContentContext(in.Int())
		case "contentrating":
			out.ContentRating = string(in.String())
		case "userrating":
			out.UserRating = string(in.String())
		case "qagmediarating":
			out.QAGMediaRating = IQGMediaRating(in.Int())
		case "keywords":
			out.Keywords = string(in.String())
		case "livestream":
			if in.IsNull() {
				in.Skip()
				out.LiveStream = nil
			} else {
				if out.LiveStream == nil {
					out.LiveStream = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LiveStream).UnmarshalJSON(data))
				}
			}
		case "sourcerelationship":
			if in.IsNull() {
				in.Skip()
				out.SourceRelationship = nil
			} else {
				if out.SourceRelationship == nil {
					out.SourceRelationship = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SourceRelationship).UnmarshalJSON(data))
				}
			}
		case "len":
			if in.IsNull() {
				in.Skip()
				out.Len = nil
			} else {
				if out.Len == nil {
					out.Len = new(int)
				}
				*out.Len = int(in.Int())
			}
		case "language":
			out.Language = string(in.String())
		case "embeddable":
			if in.IsNull() {
				in.Skip()
				out.Embeddable = nil
			} else {
				if out.Embeddable == nil {
					out.Embeddable = new(NumericBool)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Embeddable).UnmarshalJSON(data))
				}
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]*Data, 0, 8)
					} else {
						out.Data = []*Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v41 *Data
					if in.IsNull() {
						in.Skip()
						v41 = nil
					} else {
						if v41 == nil {
							v41 = new(Data)
						}
						easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb8(in, v41)
					}
					out.Data = append(out.Data, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb11(out *jwriter.Writer, in Content) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Episode != nil {
		const prefix string = ",\"episode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.Episode))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Series != "" {
		const prefix string = ",\"series\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Series))
	}
	if in.Season != "" {
		const prefix string = ",\"season\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Season))
	}
	if in.Artist != "" {
		const prefix string = ",\"artist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Artist))
	}
	if in.Genre != "" {
		const prefix string = ",\"genre\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Genre))
	}
	if in.Album != "" {
		const prefix string = ",\"album\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Album))
	}
	if in.ISRC != "" {
		const prefix string = ",\"isrc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ISRC))
	}
	if in.Producer != nil {
		const prefix string = ",\"producer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb12(out, *in.Producer)
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v42, v43 := range in.Cat {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if in.ProdQ != 0 {
		const prefix string = ",\"prodq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ProdQ))
	}
	if in.VideoQuality != 0 {
		const prefix string = ",\"videoquality\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VideoQuality))
	}
	if in.Context != 0 {
		const prefix string = ",\"context\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Context))
	}
	if in.ContentRating != "" {
		const prefix string = ",\"contentrating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContentRating))
	}
	if in.UserRating != "" {
		const prefix string = ",\"userrating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserRating))
	}
	if in.QAGMediaRating != 0 {
		const prefix string = ",\"qagmediarating\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.QAGMediaRating))
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.LiveStream != nil {
		const prefix string = ",\"livestream\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.LiveStream).MarshalJSON())
	}
	if in.SourceRelationship != nil {
		const prefix string = ",\"sourcerelationship\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.SourceRelationship).MarshalJSON())
	}
	if in.Len != nil {
		const prefix string = ",\"len\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.Len))
	}
	if in.Language != "" {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Language))
	}
	if in.Embeddable != nil {
		const prefix string = ",\"embeddable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Embeddable).MarshalJSON())
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.Data {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil {
					out.RawString("null")
				} else {
					easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb8(out, *v45)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb12(in *jlexer.Lexer, out *Producer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.Cat = append(out.Cat, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb12(out *jwriter.Writer, in Producer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		const prefix string = ",\"cat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v47, v48 := range in.Cat {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Domain))
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb10(in *jlexer.Lexer, out *Publisher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]Category, 0, 4)
					} else {
						out.Categories = []Category{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v49 Category
					v49 = Category(in.String())
					out.Categories = append(out.Categories, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb10(out *jwriter.Writer, in Publisher) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"cat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v50, v51 := range in.Categories {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb1(in *jlexer.Lexer, out *Impression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "metric":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if out.Metrics == nil {
					if !in.IsDelim(']') {
						out.Metrics = make([]*Metric, 0, 8)
					} else {
						out.Metrics = []*Metric{}
					}
				} else {
					out.Metrics = (out.Metrics)[:0]
				}
				for !in.IsDelim(']') {
					var v52 *Metric
					if in.IsNull() {
						in.Skip()
						v52 = nil
					} else {
						if v52 == nil {
							v52 = new(Metric)
						}
						easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb13(in, v52)
					}
					out.Metrics = append(out.Metrics, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(Banner)
				}
				(*out.Banner).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb14(in, out.Video)
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(Audio)
				}
				(*out.Audio).UnmarshalEasyJSON(in)
			}
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(Native)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb15(in, out.Native)
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.PrivateMarketplace = nil
			} else {
				if out.PrivateMarketplace == nil {
					out.PrivateMarketplace = new(PrivateMarketplace)
				}
				easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb16(in, out.PrivateMarketplace)
			}
		case "displaymanager":
			out.DisplayManager = string(in.String())
		case "displaymanagerver":
			out.DisplayManagerVersion = string(in.String())
		case "instl":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IsInterstitial).UnmarshalJSON(data))
			}
		case "tagid":
			out.TagID = string(in.String())
		case "bidfloor":
			out.BidFloorPrice = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCurrency = Currency(in.String())
		case "clickbrowser":
			if in.IsNull() {
				in.Skip()
				out.BrowserTypeUponClick = nil
			} else {
				if out.BrowserTypeUponClick == nil {
					out.BrowserTypeUponClick = new(BrowserType)
				}
				*out.BrowserTypeUponClick = BrowserType(in.Int())
			}
		case "secure":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IsSecure).UnmarshalJSON(data))
			}
		case "iframebuster":
			if in.IsNull() {
				in.Skip()
				out.IframeBuster = nil
			} else {
				in.Delim('[')
				if out.IframeBuster == nil {
					if !in.IsDelim(']') {
						out.IframeBuster = make([]string, 0, 4)
					} else {
						out.IframeBuster = []string{}
					}
				} else {
					out.IframeBuster = (out.IframeBuster)[:0]
				}
				for !in.IsDelim(']') {
					var v53 string
					v53 = string(in.String())
					out.IframeBuster = append(out.IframeBuster, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exp":
			out.Exp = int(in.Int())
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb1(out *jwriter.Writer, in Impression) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if len(in.Metrics) != 0 {
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v54, v55 := range in.Metrics {
				if v54 > 0 {
					out.RawByte(',')
				}
				if v55 == nil {
					out.RawString("null")
				} else {
					easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb13(out, *v55)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Banner != nil {
		const prefix string = ",\"banner\":"
		out.RawString(prefix)
		(*in.Banner).MarshalEasyJSON(out)
	}
	if in.Video != nil {
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb14(out, *in.Video)
	}
	if in.Audio != nil {
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		(*in.Audio).MarshalEasyJSON(out)
	}
	if in.Native != nil {
		const prefix string = ",\"native\":"
		out.RawString(prefix)
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb15(out, *in.Native)
	}
	if in.PrivateMarketplace != nil {
		const prefix string = ",\"pmp\":"
		out.RawString(prefix)
		easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb16(out, *in.PrivateMarketplace)
	}
	if in.DisplayManager != "" {
		const prefix string = ",\"displaymanager\":"
		out.RawString(prefix)
		out.String(string(in.DisplayManager))
	}
	if in.DisplayManagerVersion != "" {
		const prefix string = ",\"displaymanagerver\":"
		out.RawString(prefix)
		out.String(string(in.DisplayManagerVersion))
	}
	if in.IsInterstitial {
		const prefix string = ",\"instl\":"
		out.RawString(prefix)
		out.Raw((in.IsInterstitial).MarshalJSON())
	}
	if in.TagID != "" {
		const prefix string = ",\"tagid\":"
		out.RawString(prefix)
		out.String(string(in.TagID))
	}
	{
		const prefix string = ",\"bidfloor\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidFloorPrice))
	}
	if in.BidFloorCurrency != "" {
		const prefix string = ",\"bidfloorcur\":"
		out.RawString(prefix)
		out.String(string(in.BidFloorCurrency))
	}
	if in.BrowserTypeUponClick != nil {
		const prefix string = ",\"clickbrowser\":"
		out.RawString(prefix)
		out.Int(int(*in.BrowserTypeUponClick))
	}
	if in.IsSecure {
		const prefix string = ",\"secure\":"
		out.RawString(prefix)
		out.Raw((in.IsSecure).MarshalJSON())
	}
	if len(in.IframeBuster) != 0 {
		const prefix string = ",\"iframebuster\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v56, v57 := range in.IframeBuster {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	if in.Exp != 0 {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int(int(in.Exp))
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb16(in *jlexer.Lexer, out *PrivateMarketplace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "private_auction":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IsPrivateAuction).UnmarshalJSON(data))
			}
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if out.Deals == nil {
					if !in.IsDelim(']') {
						out.Deals = make([]*Deal, 0, 8)
					} else {
						out.Deals = []*Deal{}
					}
				} else {
					out.Deals = (out.Deals)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *Deal
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(Deal)
						}
						easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb17(in, v58)
					}
					out.Deals = append(out.Deals, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb16(out *jwriter.Writer, in PrivateMarketplace) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"private_auction\":"
		out.RawString(prefix[1:])
		out.Raw((in.IsPrivateAuction).MarshalJSON())
	}
	{
		const prefix string = ",\"deals\":"
		out.RawString(prefix)
		if in.Deals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Deals {
				if v59 > 0 {
					out.RawByte(',')
				}
				if v60 == nil {
					out.RawString("null")
				} else {
					easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb17(out, *v60)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb17(in *jlexer.Lexer, out *Deal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "bidfloor":
			out.BidFloorPrice = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCurrency = Currency(in.String())
		case "at":
			out.AuctionType = DealAuctionType(in.Int())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.WhitelistedSeats = nil
			} else {
				in.Delim('[')
				if out.WhitelistedSeats == nil {
					if !in.IsDelim(']') {
						out.WhitelistedSeats = make([]string, 0, 4)
					} else {
						out.WhitelistedSeats = []string{}
					}
				} else {
					out.WhitelistedSeats = (out.WhitelistedSeats)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.WhitelistedSeats = append(out.WhitelistedSeats, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wadomain":
			if in.IsNull() {
				in.Skip()
				out.AdvertiserDomains = nil
			} else {
				in.Delim('[')
				if out.AdvertiserDomains == nil {
					if !in.IsDelim(']') {
						out.AdvertiserDomains = make([]string, 0, 4)
					} else {
						out.AdvertiserDomains = []string{}
					}
				} else {
					out.AdvertiserDomains = (out.AdvertiserDomains)[:0]
				}
				for !in.IsDelim(']') {
					var v62 string
					v62 = string(in.String())
					out.AdvertiserDomains = append(out.AdvertiserDomains, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb17(out *jwriter.Writer, in Deal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"bidfloor\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidFloorPrice))
	}
	if in.BidFloorCurrency != "" {
		const prefix string = ",\"bidfloorcur\":"
		out.RawString(prefix)
		out.String(string(in.BidFloorCurrency))
	}
	if in.AuctionType != 0 {
		const prefix string = ",\"at\":"
		out.RawString(prefix)
		out.Int(int(in.AuctionType))
	}
	if len(in.WhitelistedSeats) != 0 {
		const prefix string = ",\"wseat\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v63, v64 := range in.WhitelistedSeats {
				if v63 > 0 {
					out.RawByte(',')
				}
				out.String(string(v64))
			}
			out.RawByte(']')
		}
	}
	if len(in.AdvertiserDomains) != 0 {
		const prefix string = ",\"wadomain\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v65, v66 := range in.AdvertiserDomains {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb15(in *jlexer.Lexer, out *Native) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			out.Request = string(in.String())
		case "ver":
			out.Version = string(in.String())
		case "api":
			if in.IsNull() {
				in.Skip()
				out.APIFrameworks = nil
			} else {
				in.Delim('[')
				if out.APIFrameworks == nil {
					if !in.IsDelim(']') {
						out.APIFrameworks = make([]APIFramework, 0, 8)
					} else {
						out.APIFrameworks = []APIFramework{}
					}
				} else {
					out.APIFrameworks = (out.APIFrameworks)[:0]
				}
				for !in.IsDelim(']') {
					var v67 APIFramework
					v67 = APIFramework(in.Int())
					out.APIFrameworks = append(out.APIFrameworks, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BlockedCreativeAttributes = nil
			} else {
				in.Delim('[')
				if out.BlockedCreativeAttributes == nil {
					if !in.IsDelim(']') {
						out.BlockedCreativeAttributes = make([]CreativeAttribute, 0, 8)
					} else {
						out.BlockedCreativeAttributes = []CreativeAttribute{}
					}
				} else {
					out.BlockedCreativeAttributes = (out.BlockedCreativeAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v68 CreativeAttribute
					v68 = CreativeAttribute(in.Int())
					out.BlockedCreativeAttributes = append(out.BlockedCreativeAttributes, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb15(out *jwriter.Writer, in Native) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix[1:])
		out.String(string(in.Request))
	}
	if in.Version != "" {
		const prefix string = ",\"ver\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	if len(in.APIFrameworks) != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v69, v70 := range in.APIFrameworks {
				if v69 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v70))
			}
			out.RawByte(']')
		}
	}
	if len(in.BlockedCreativeAttributes) != 0 {
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v71, v72 := range in.BlockedCreativeAttributes {
				if v71 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v72))
			}
			out.RawByte(']')
		}
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb14(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMETypes = nil
			} else {
				in.Delim('[')
				if out.MIMETypes == nil {
					if !in.IsDelim(']') {
						out.MIMETypes = make([]string, 0, 4)
					} else {
						out.MIMETypes = []string{}
					}
				} else {
					out.MIMETypes = (out.MIMETypes)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.MIMETypes = append(out.MIMETypes, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			if in.IsNull() {
				in.Skip()
				out.MinDuration = nil
			} else {
				if out.MinDuration == nil {
					out.MinDuration = new(int)
				}
				*out.MinDuration = int(in.Int())
			}
		case "maxduration":
			if in.IsNull() {
				in.Skip()
				out.MaxDuration = nil
			} else {
				if out.MaxDuration == nil {
					out.MaxDuration = new(int)
				}
				*out.MaxDuration = int(in.Int())
			}
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]Protocol, 0, 8)
					} else {
						out.Protocols = []Protocol{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v74 Protocol
					v74 = Protocol(in.Int())
					out.Protocols = append(out.Protocols, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "protocol":
			out.Protocol = Protocol(in.Int())
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "startdelay":
			if in.IsNull() {
				in.Skip()
				out.StartDelay = nil
			} else {
				if out.StartDelay == nil {
					out.StartDelay = new(StartDelay)
				}
				*out.StartDelay = StartDelay(in.Int())
			}
		case "placement":
			out.PlacementType = VideoPlacementType(in.Int())
		case "linearity":
			out.Linearity = Linearity(in.Int())
		case "skip":
			out.Skippable = int(in.Int())
		case "skipmin":
			out.SkipMin = int(in.Int())
		case "skipafter":
			out.SkipAfter = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BlockedCreativeAttributes = nil
			} else {
				in.Delim('[')
				if out.BlockedCreativeAttributes == nil {
					if !in.IsDelim(']') {
						out.BlockedCreativeAttributes = make([]CreativeAttribute, 0, 8)
					} else {
						out.BlockedCreativeAttributes = []CreativeAttribute{}
					}
				} else {
					out.BlockedCreativeAttributes = (out.BlockedCreativeAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v75 CreativeAttribute
					v75 = CreativeAttribute(in.Int())
					out.BlockedCreativeAttributes = append(out.BlockedCreativeAttributes, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtendedDuration = int(in.Int())
		case "minbitrate":
			out.MinBitRate = int(in.Int())
		case "maxbitrate":
			out.MaxBitRate = int(in.Int())
		case "boxingallowed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IsBoxingAllowed).UnmarshalJSON(data))
			}
		case "playbackmethod":
			if in.IsNull() {
				in.Skip()
				out.PlaybackMethods = nil
			} else {
				in.Delim('[')
				if out.PlaybackMethods == nil {
					if !in.IsDelim(']') {
						out.PlaybackMethods = make([]PlaybackMethod, 0, 8)
					} else {
						out.PlaybackMethods = []PlaybackMethod{}
					}
				} else {
					out.PlaybackMethods = (out.PlaybackMethods)[:0]
				}
				for !in.IsDelim(']') {
					var v76 PlaybackMethod
					v76 = PlaybackMethod(in.Int())
					out.PlaybackMethods = append(out.PlaybackMethods, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "playbackend":
			out.PlaybackEndEvent = PlaybackCessationMode(in.Int())
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.DeliveryMethods = nil
			} else {
				in.Delim('[')
				if out.DeliveryMethods == nil {
					if !in.IsDelim(']') {
						out.DeliveryMethods = make([]DeliveryMethod, 0, 8)
					} else {
						out.DeliveryMethods = []DeliveryMethod{}
					}
				} else {
					out.DeliveryMethods = (out.DeliveryMethods)[:0]
				}
				for !in.IsDelim(']') {
					var v77 DeliveryMethod
					v77 = DeliveryMethod(in.Int())
					out.DeliveryMethods = append(out.DeliveryMethods, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Position = AdPosition(in.Int())
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAds = nil
			} else {
				in.Delim('[')
				if out.CompanionAds == nil {
					if !in.IsDelim(']') {
						out.CompanionAds = make([]Banner, 0, 1)
					} else {
						out.CompanionAds = []Banner{}
					}
				} else {
					out.CompanionAds = (out.CompanionAds)[:0]
				}
				for !in.IsDelim(']') {
					var v78 Banner
					(v78).UnmarshalEasyJSON(in)
					out.CompanionAds = append(out.CompanionAds, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.APIFrameworks = nil
			} else {
				in.Delim('[')
				if out.APIFrameworks == nil {
					if !in.IsDelim(']') {
						out.APIFrameworks = make([]APIFramework, 0, 8)
					} else {
						out.APIFrameworks = []APIFramework{}
					}
				} else {
					out.APIFrameworks = (out.APIFrameworks)[:0]
				}
				for !in.IsDelim(']') {
					var v79 APIFramework
					v79 = APIFramework(in.Int())
					out.APIFrameworks = append(out.APIFrameworks, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionTypes = nil
			} else {
				in.Delim('[')
				if out.CompanionTypes == nil {
					if !in.IsDelim(']') {
						out.CompanionTypes = make([]CompanionType, 0, 8)
					} else {
						out.CompanionTypes = []CompanionType{}
					}
				} else {
					out.CompanionTypes = (out.CompanionTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v80 CompanionType
					v80 = CompanionType(in.Int())
					out.CompanionTypes = append(out.CompanionTypes, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb14(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimes\":"
		out.RawString(prefix[1:])
		if in.MIMETypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v81, v82 := range in.MIMETypes {
				if v81 > 0 {
					out.RawByte(',')
				}
				out.String(string(v82))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != nil {
		const prefix string = ",\"minduration\":"
		out.RawString(prefix)
		out.Int(int(*in.MinDuration))
	}
	if in.MaxDuration != nil {
		const prefix string = ",\"maxduration\":"
		out.RawString(prefix)
		out.Int(int(*in.MaxDuration))
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"protocols\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v83, v84 := range in.Protocols {
				if v83 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v84))
			}
			out.RawByte(']')
		}
	}
	if in.Protocol != 0 {
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.Int(int(in.Protocol))
	}
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	if in.StartDelay != nil {
		const prefix string = ",\"startdelay\":"
		out.RawString(prefix)
		out.Int(int(*in.StartDelay))
	}
	if in.PlacementType != 0 {
		const prefix string = ",\"placement\":"
		out.RawString(prefix)
		out.Int(int(in.PlacementType))
	}
	if in.Linearity != 0 {
		const prefix string = ",\"linearity\":"
		out.RawString(prefix)
		out.Int(int(in.Linearity))
	}
	if in.Skippable != 0 {
		const prefix string = ",\"skip\":"
		out.RawString(prefix)
		out.Int(int(in.Skippable))
	}
	if in.SkipMin != 0 {
		const prefix string = ",\"skipmin\":"
		out.RawString(prefix)
		out.Int(int(in.SkipMin))
	}
	if in.SkipAfter != 0 {
		const prefix string = ",\"skipafter\":"
		out.RawString(prefix)
		out.Int(int(in.SkipAfter))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int(int(in.Sequence))
	}
	if len(in.BlockedCreativeAttributes) != 0 {
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v85, v86 := range in.BlockedCreativeAttributes {
				if v85 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v86))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtendedDuration != 0 {
		const prefix string = ",\"maxextended\":"
		out.RawString(prefix)
		out.Int(int(in.MaxExtendedDuration))
	}
	if in.MinBitRate != 0 {
		const prefix string = ",\"minbitrate\":"
		out.RawString(prefix)
		out.Int(int(in.MinBitRate))
	}
	if in.MaxBitRate != 0 {
		const prefix string = ",\"maxbitrate\":"
		out.RawString(prefix)
		out.Int(int(in.MaxBitRate))
	}
	if in.IsBoxingAllowed {
		const prefix string = ",\"boxingallowed\":"
		out.RawString(prefix)
		out.Raw((in.IsBoxingAllowed).MarshalJSON())
	}
	if len(in.PlaybackMethods) != 0 {
		const prefix string = ",\"playbackmethod\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v87, v88 := range in.PlaybackMethods {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v88))
			}
			out.RawByte(']')
		}
	}
	if in.PlaybackEndEvent != 0 {
		const prefix string = ",\"playbackend\":"
		out.RawString(prefix)
		out.Int(int(in.PlaybackEndEvent))
	}
	if len(in.DeliveryMethods) != 0 {
		const prefix string = ",\"delivery\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v89, v90 := range in.DeliveryMethods {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v90))
			}
			out.RawByte(']')
		}
	}
	if in.Position != 0 {
		const prefix string = ",\"pos\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"companionad\":"
		out.RawString(prefix)
		if in.CompanionAds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v91, v92 := range in.CompanionAds {
				if v91 > 0 {
					out.RawByte(',')
				}
				(v92).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.APIFrameworks) != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v93, v94 := range in.APIFrameworks {
				if v93 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v94))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"companiontype\":"
		out.RawString(prefix)
		if in.CompanionTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.CompanionTypes {
				if v95 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v96))
			}
			out.RawByte(']')
		}
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComVungleVungoOpenrtb13(in *jlexer.Lexer, out *Metric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		case "vendor":
			out.Vendor = string(in.String())
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComVungleVungoOpenrtb13(out *jwriter.Writer, in Metric) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	if in.Vendor != "" {
		const prefix string = ",\"vendor\":"
		out.RawString(prefix)
		out.String(string(in.Vendor))
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
