// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC16456caDecodeGithubComVungleVungoOpenrtb(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				in.Delim('[')
				if out.Format == nil {
					if !in.IsDelim(']') {
						out.Format = make([]Format, 0, 1)
					} else {
						out.Format = []Format{}
					}
				} else {
					out.Format = (out.Format)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Format
					easyjsonC16456caDecodeGithubComVungleVungoOpenrtb1(in, &v1)
					out.Format = append(out.Format, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "wmax":
			if in.IsNull() {
				in.Skip()
				out.MaxWidth = nil
			} else {
				if out.MaxWidth == nil {
					out.MaxWidth = new(int)
				}
				*out.MaxWidth = int(in.Int())
			}
		case "hmax":
			if in.IsNull() {
				in.Skip()
				out.MaxHeight = nil
			} else {
				if out.MaxHeight == nil {
					out.MaxHeight = new(int)
				}
				*out.MaxHeight = int(in.Int())
			}
		case "wmin":
			if in.IsNull() {
				in.Skip()
				out.MinWidth = nil
			} else {
				if out.MinWidth == nil {
					out.MinWidth = new(int)
				}
				*out.MinWidth = int(in.Int())
			}
		case "hmin":
			if in.IsNull() {
				in.Skip()
				out.MinHeight = nil
			} else {
				if out.MinHeight == nil {
					out.MinHeight = new(int)
				}
				*out.MinHeight = int(in.Int())
			}
		case "btype":
			if in.IsNull() {
				in.Skip()
				out.BlockedTypes = nil
			} else {
				in.Delim('[')
				if out.BlockedTypes == nil {
					if !in.IsDelim(']') {
						out.BlockedTypes = make([]int, 0, 8)
					} else {
						out.BlockedTypes = []int{}
					}
				} else {
					out.BlockedTypes = (out.BlockedTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.BlockedTypes = append(out.BlockedTypes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BlockedAttributes = nil
			} else {
				in.Delim('[')
				if out.BlockedAttributes == nil {
					if !in.IsDelim(']') {
						out.BlockedAttributes = make([]int, 0, 8)
					} else {
						out.BlockedAttributes = []int{}
					}
				} else {
					out.BlockedAttributes = (out.BlockedAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int
					v3 = int(in.Int())
					out.BlockedAttributes = append(out.BlockedAttributes, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Position = AdPosition(in.Int())
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMETypes = nil
			} else {
				in.Delim('[')
				if out.MIMETypes == nil {
					if !in.IsDelim(']') {
						out.MIMETypes = make([]string, 0, 4)
					} else {
						out.MIMETypes = []string{}
					}
				} else {
					out.MIMETypes = (out.MIMETypes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.MIMETypes = append(out.MIMETypes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topframe":
			if in.IsNull() {
				in.Skip()
				out.TopFrame = nil
			} else {
				if out.TopFrame == nil {
					out.TopFrame = new(int)
				}
				*out.TopFrame = int(in.Int())
			}
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.ExpandDirections = nil
			} else {
				in.Delim('[')
				if out.ExpandDirections == nil {
					if !in.IsDelim(']') {
						out.ExpandDirections = make([]int, 0, 8)
					} else {
						out.ExpandDirections = []int{}
					}
				} else {
					out.ExpandDirections = (out.ExpandDirections)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.ExpandDirections = append(out.ExpandDirections, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.APIFrameworks = nil
			} else {
				in.Delim('[')
				if out.APIFrameworks == nil {
					if !in.IsDelim(']') {
						out.APIFrameworks = make([]int, 0, 8)
					} else {
						out.APIFrameworks = []int{}
					}
				} else {
					out.APIFrameworks = (out.APIFrameworks)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int
					v6 = int(in.Int())
					out.APIFrameworks = append(out.APIFrameworks, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "vcm":
			out.VCM = CompanionRenderingMode(in.Int())
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC16456caEncodeGithubComVungleVungoOpenrtb(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Format) != 0 {
		const prefix string = ",\"format\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v7, v8 := range in.Format {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjsonC16456caEncodeGithubComVungleVungoOpenrtb1(out, v8)
			}
			out.RawByte(']')
		}
	}
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	if in.MaxWidth != nil {
		const prefix string = ",\"wmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.MaxWidth))
	}
	if in.MaxHeight != nil {
		const prefix string = ",\"hmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.MaxHeight))
	}
	if in.MinWidth != nil {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.MinWidth))
	}
	if in.MinHeight != nil {
		const prefix string = ",\"hmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.MinHeight))
	}
	if len(in.BlockedTypes) != 0 {
		const prefix string = ",\"btype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.BlockedTypes {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.BlockedAttributes) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.BlockedAttributes {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	if in.Position != 0 {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Position))
	}
	if len(in.MIMETypes) != 0 {
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.MIMETypes {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.TopFrame != nil {
		const prefix string = ",\"topframe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.TopFrame))
	}
	if len(in.ExpandDirections) != 0 {
		const prefix string = ",\"expdir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.ExpandDirections {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.APIFrameworks) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.APIFrameworks {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	if in.ID != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ID))
	}
	if in.VCM != 0 {
		const prefix string = ",\"vcm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.VCM))
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Banner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC16456caEncodeGithubComVungleVungoOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Banner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC16456caEncodeGithubComVungleVungoOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Banner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC16456caDecodeGithubComVungleVungoOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Banner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC16456caDecodeGithubComVungleVungoOpenrtb(l, v)
}
func easyjsonC16456caDecodeGithubComVungleVungoOpenrtb1(in *jlexer.Lexer, out *Format) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = uint64(in.Uint64())
		case "h":
			out.H = uint64(in.Uint64())
		case "wratio":
			out.WRatio = uint64(in.Uint64())
		case "hratio":
			out.HRatio = uint64(in.Uint64())
		case "wmin":
			out.WMin = uint64(in.Uint64())
		case "ext":
			if m, ok := out.Ext.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Ext.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Ext = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC16456caEncodeGithubComVungleVungoOpenrtb1(out *jwriter.Writer, in Format) {
	out.RawByte('{')
	first := true
	_ = first
	if in.W != 0 {
		const prefix string = ",\"w\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.H))
	}
	if in.WRatio != 0 {
		const prefix string = ",\"wratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.WRatio))
	}
	if in.HRatio != 0 {
		const prefix string = ",\"hratio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.HRatio))
	}
	if in.WMin != 0 {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.WMin))
	}
	if in.Ext != nil {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Ext.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Ext.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Ext))
		}
	}
	out.RawByte('}')
}
