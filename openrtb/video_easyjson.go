// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c9ce8c3DecodeGithubComVungleVungoOpenrtb(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.MIMETypes = nil
			} else {
				in.Delim('[')
				if out.MIMETypes == nil {
					if !in.IsDelim(']') {
						out.MIMETypes = make([]string, 0, 4)
					} else {
						out.MIMETypes = []string{}
					}
				} else {
					out.MIMETypes = (out.MIMETypes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.MIMETypes = append(out.MIMETypes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			if in.IsNull() {
				in.Skip()
				out.MinDuration = nil
			} else {
				if out.MinDuration == nil {
					out.MinDuration = new(int)
				}
				*out.MinDuration = int(in.Int())
			}
		case "maxduration":
			if in.IsNull() {
				in.Skip()
				out.MaxDuration = nil
			} else {
				if out.MaxDuration == nil {
					out.MaxDuration = new(int)
				}
				*out.MaxDuration = int(in.Int())
			}
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]Protocol, 0, 8)
					} else {
						out.Protocols = []Protocol{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Protocol
					v2 = Protocol(in.Int())
					out.Protocols = append(out.Protocols, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "protocol":
			out.Protocol = Protocol(in.Int())
		case "w":
			out.Width = int(in.Int())
		case "h":
			out.Height = int(in.Int())
		case "startdelay":
			if in.IsNull() {
				in.Skip()
				out.StartDelay = nil
			} else {
				if out.StartDelay == nil {
					out.StartDelay = new(StartDelay)
				}
				*out.StartDelay = StartDelay(in.Int())
			}
		case "placement":
			out.PlacementType = VideoPlacementType(in.Int())
		case "linearity":
			out.Linearity = Linearity(in.Int())
		case "skip":
			out.Skippable = int(in.Int())
		case "skipmin":
			out.SkipMin = int(in.Int())
		case "skipafter":
			out.SkipAfter = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BlockedCreativeAttributes = nil
			} else {
				in.Delim('[')
				if out.BlockedCreativeAttributes == nil {
					if !in.IsDelim(']') {
						out.BlockedCreativeAttributes = make([]CreativeAttribute, 0, 8)
					} else {
						out.BlockedCreativeAttributes = []CreativeAttribute{}
					}
				} else {
					out.BlockedCreativeAttributes = (out.BlockedCreativeAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v3 CreativeAttribute
					v3 = CreativeAttribute(in.Int())
					out.BlockedCreativeAttributes = append(out.BlockedCreativeAttributes, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtendedDuration = int(in.Int())
		case "minbitrate":
			out.MinBitRate = int(in.Int())
		case "maxbitrate":
			out.MaxBitRate = int(in.Int())
		case "boxingallowed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.IsBoxingAllowed).UnmarshalJSON(data))
			}
		case "playbackmethod":
			if in.IsNull() {
				in.Skip()
				out.PlaybackMethods = nil
			} else {
				in.Delim('[')
				if out.PlaybackMethods == nil {
					if !in.IsDelim(']') {
						out.PlaybackMethods = make([]PlaybackMethod, 0, 8)
					} else {
						out.PlaybackMethods = []PlaybackMethod{}
					}
				} else {
					out.PlaybackMethods = (out.PlaybackMethods)[:0]
				}
				for !in.IsDelim(']') {
					var v4 PlaybackMethod
					v4 = PlaybackMethod(in.Int())
					out.PlaybackMethods = append(out.PlaybackMethods, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "playbackend":
			out.PlaybackEndEvent = PlaybackCessationMode(in.Int())
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.DeliveryMethods = nil
			} else {
				in.Delim('[')
				if out.DeliveryMethods == nil {
					if !in.IsDelim(']') {
						out.DeliveryMethods = make([]DeliveryMethod, 0, 8)
					} else {
						out.DeliveryMethods = []DeliveryMethod{}
					}
				} else {
					out.DeliveryMethods = (out.DeliveryMethods)[:0]
				}
				for !in.IsDelim(']') {
					var v5 DeliveryMethod
					v5 = DeliveryMethod(in.Int())
					out.DeliveryMethods = append(out.DeliveryMethods, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Position = AdPosition(in.Int())
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAds = nil
			} else {
				in.Delim('[')
				if out.CompanionAds == nil {
					if !in.IsDelim(']') {
						out.CompanionAds = make([]Banner, 0, 1)
					} else {
						out.CompanionAds = []Banner{}
					}
				} else {
					out.CompanionAds = (out.CompanionAds)[:0]
				}
				for !in.IsDelim(']') {
					var v6 Banner
					(v6).UnmarshalEasyJSON(in)
					out.CompanionAds = append(out.CompanionAds, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.APIFrameworks = nil
			} else {
				in.Delim('[')
				if out.APIFrameworks == nil {
					if !in.IsDelim(']') {
						out.APIFrameworks = make([]APIFramework, 0, 8)
					} else {
						out.APIFrameworks = []APIFramework{}
					}
				} else {
					out.APIFrameworks = (out.APIFrameworks)[:0]
				}
				for !in.IsDelim(']') {
					var v7 APIFramework
					v7 = APIFramework(in.Int())
					out.APIFrameworks = append(out.APIFrameworks, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionTypes = nil
			} else {
				in.Delim('[')
				if out.CompanionTypes == nil {
					if !in.IsDelim(']') {
						out.CompanionTypes = make([]CompanionType, 0, 8)
					} else {
						out.CompanionTypes = []CompanionType{}
					}
				} else {
					out.CompanionTypes = (out.CompanionTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v8 CompanionType
					v8 = CompanionType(in.Int())
					out.CompanionTypes = append(out.CompanionTypes, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if m, ok := out.Extension.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Extension.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Extension = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9ce8c3EncodeGithubComVungleVungoOpenrtb(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimes\":"
		out.RawString(prefix[1:])
		if in.MIMETypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.MIMETypes {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != nil {
		const prefix string = ",\"minduration\":"
		out.RawString(prefix)
		out.Int(int(*in.MinDuration))
	}
	if in.MaxDuration != nil {
		const prefix string = ",\"maxduration\":"
		out.RawString(prefix)
		out.Int(int(*in.MaxDuration))
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"protocols\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Protocols {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	if in.Protocol != 0 {
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.Int(int(in.Protocol))
	}
	if in.Width != 0 {
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	if in.StartDelay != nil {
		const prefix string = ",\"startdelay\":"
		out.RawString(prefix)
		out.Int(int(*in.StartDelay))
	}
	if in.PlacementType != 0 {
		const prefix string = ",\"placement\":"
		out.RawString(prefix)
		out.Int(int(in.PlacementType))
	}
	if in.Linearity != 0 {
		const prefix string = ",\"linearity\":"
		out.RawString(prefix)
		out.Int(int(in.Linearity))
	}
	if in.Skippable != 0 {
		const prefix string = ",\"skip\":"
		out.RawString(prefix)
		out.Int(int(in.Skippable))
	}
	if in.SkipMin != 0 {
		const prefix string = ",\"skipmin\":"
		out.RawString(prefix)
		out.Int(int(in.SkipMin))
	}
	if in.SkipAfter != 0 {
		const prefix string = ",\"skipafter\":"
		out.RawString(prefix)
		out.Int(int(in.SkipAfter))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		out.RawString(prefix)
		out.Int(int(in.Sequence))
	}
	if len(in.BlockedCreativeAttributes) != 0 {
		const prefix string = ",\"battr\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.BlockedCreativeAttributes {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v14))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtendedDuration != 0 {
		const prefix string = ",\"maxextended\":"
		out.RawString(prefix)
		out.Int(int(in.MaxExtendedDuration))
	}
	if in.MinBitRate != 0 {
		const prefix string = ",\"minbitrate\":"
		out.RawString(prefix)
		out.Int(int(in.MinBitRate))
	}
	if in.MaxBitRate != 0 {
		const prefix string = ",\"maxbitrate\":"
		out.RawString(prefix)
		out.Int(int(in.MaxBitRate))
	}
	if in.IsBoxingAllowed {
		const prefix string = ",\"boxingallowed\":"
		out.RawString(prefix)
		out.Raw((in.IsBoxingAllowed).MarshalJSON())
	}
	if len(in.PlaybackMethods) != 0 {
		const prefix string = ",\"playbackmethod\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v15, v16 := range in.PlaybackMethods {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	if in.PlaybackEndEvent != 0 {
		const prefix string = ",\"playbackend\":"
		out.RawString(prefix)
		out.Int(int(in.PlaybackEndEvent))
	}
	if len(in.DeliveryMethods) != 0 {
		const prefix string = ",\"delivery\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.DeliveryMethods {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	if in.Position != 0 {
		const prefix string = ",\"pos\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"companionad\":"
		out.RawString(prefix)
		if in.CompanionAds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.CompanionAds {
				if v19 > 0 {
					out.RawByte(',')
				}
				(v20).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.APIFrameworks) != 0 {
		const prefix string = ",\"api\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v21, v22 := range in.APIFrameworks {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"companiontype\":"
		out.RawString(prefix)
		if in.CompanionTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.CompanionTypes {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Extension != nil {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		if m, ok := in.Extension.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Extension.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Extension))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Video) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9ce8c3EncodeGithubComVungleVungoOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Video) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9ce8c3EncodeGithubComVungleVungoOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Video) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9ce8c3DecodeGithubComVungleVungoOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Video) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9ce8c3DecodeGithubComVungleVungoOpenrtb(l, v)
}
