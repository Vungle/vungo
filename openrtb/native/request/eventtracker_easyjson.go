// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package request

import (
	json "encoding/json"
	native "github.com/Vungle/vungo/openrtb/native"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson88abeb4cDecodeGithubComVungleVungoOpenrtbNativeRequest(in *jlexer.Lexer, out *EventTracker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.Event = native.EventType(in.Int64())
		case "methods":
			if in.IsNull() {
				in.Skip()
				out.Methods = nil
			} else {
				in.Delim('[')
				if out.Methods == nil {
					if !in.IsDelim(']') {
						out.Methods = make([]native.EventTrackingMethod, 0, 8)
					} else {
						out.Methods = []native.EventTrackingMethod{}
					}
				} else {
					out.Methods = (out.Methods)[:0]
				}
				for !in.IsDelim(']') {
					var v1 native.EventTrackingMethod
					v1 = native.EventTrackingMethod(in.Int64())
					out.Methods = append(out.Methods, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Extension).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson88abeb4cEncodeGithubComVungleVungoOpenrtbNativeRequest(out *jwriter.Writer, in EventTracker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Event))
	}
	{
		const prefix string = ",\"methods\":"
		out.RawString(prefix)
		if in.Methods == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Methods {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v3))
			}
			out.RawByte(']')
		}
	}
	if len(in.Extension) != 0 {
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.Raw((in.Extension).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventTracker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson88abeb4cEncodeGithubComVungleVungoOpenrtbNativeRequest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventTracker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson88abeb4cEncodeGithubComVungleVungoOpenrtbNativeRequest(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventTracker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson88abeb4cDecodeGithubComVungleVungoOpenrtbNativeRequest(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventTracker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson88abeb4cDecodeGithubComVungleVungoOpenrtbNativeRequest(l, v)
}
